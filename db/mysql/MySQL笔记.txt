***建议用notepad打开查看
MySQL数据库
	1.查看数据表
		--查看表的列信息	00 表名;
			field：字段名；type：字段类型；NULL：是否可以为空；key：是否编制为索引；default：默认值；extra：附加信息
		--查看创建表所使用的语句	show create table 表名;
			table：被选中的表；create table：创建表所使用的sql语句
	2.数学函数
		--绝对值函数（正值使用还是正值）	select abs(数值);
		--符号函数（判断正1负-1零0）	select sign(数值);	
		--获取随机数0~1（带有种子数的参与运算且值固定）	select rand()； 或者	select rand(种子数)；
		--取大于整数（大于这个数的第一个整数）	select ceil(2.8);
		--取小于整数（小于这个数的第一个整数）	select floor(3.5);
		--四舍五入	select round(小数值,保留位数也可以为负);
		--截取小数保留指定位数	select truncate(小数值,保留的小数位数);
		--求模函数	select mod(被除数,除数);
		--幂运算（求X的Y次幂）	select pow(2,3);
		--平方根（仅限正数）	select sqrt(9);
		--角度换为弧度(π)和弧度换为角度（°）		select radians(180);	select degress(3.14);
		--返回π的值	select pi();
		--三角函数		sin(x) asin(x) cos(x) acos(x) tan(x) atan(x) cot(x) 
	3.系统函数
		--获取MySQL版本号	select version();
		--查看当前用户的连接数（启动之后被连接的次数）	select connection_id();
		--查看当前所使用的数据库	select database();
		--获取用户名	select user();
	4.登录MySQL
		--使用命令行，先启动服务，后mysql -u root -p
	5.MySQL数据类型
		--常用数据类型：
			整数(微小整数tinyint一个字节-128~127)
				(小整数smallint两个字节-32678~32677)
				(普通int四个字节)(大整数bigint八个字节)
			定点数decimal(p总位数,s小数点所在位数)小数点位置固定，数据精度有保证
			浮点数float(p,s)四字节单精度
				double(p,s)八字节双精度
			日期时间(date、time、datatime)
			文本(char固定长度，如果数据没到这个长度系统也占用设定的长度)
				(varchar可变长度进行收缩，灵活性强)
				(text大文本存储，理论上存储无限长度的字符串，不可以当成查询的条件)
			二进制bit
	6.创建数据表
		--数据表设计和ER（entity-relation ship实体关系）图（实体关系图）：长方形，实体名词；圆形，属性名词；菱形，关系动词
			第一步：需求分析阶段，分析客户的业务和数据处理需求
				系统需要记住哪些信息？
			第二步：概要设计阶段，设计数据库的ER图，确认需求信息的正确和完整
			第三步：详细设计阶段，将ER图转换为多张表，进行逻辑设计，并应用数据库设计的三大范式进行审核
			第四步：代码编写阶段，选择具体数据库进行物理实践，并编写代码实现前端应用
		--使用范式检查数据表合理性：设计关系数据库遵从不同的规范要求，设计出合理的关系数据库，这些不同的规范要求称为不同范式越高，冗余越小
			第一范式（1NF）：如果每一列都是不可再分的最小数据单元，就满足1NF
				例如：地址(列)：辽宁辽阳(值)（这个不满足1NF，所以改成）省份：辽宁；城市：辽阳（满足1NF，记不可拆分的原子单元）
			第二范式（2NF）：如果关系满足1NF，且除主键以外其它列，都完全依赖该主键，则满足2NF（一张表只描述一件相互关系着的事情）
				例如：表：姓名；性别；年龄；岗位退休时间（不满足2NF将拆分成俩表）表1：姓名；性别；年龄。表2：年龄；岗位退休时间
			第三范式（3NF）：如果满足2NF，并且除了主键以外的其它列都不传递依赖于主键列。即要求表中不存在冗余字段
				例如：(表1)：姓名；性别；职位(表2)姓名；性别；职位；住址（不满足3NF，去掉表2的职位列就好）
		--使用客户端创建数据表
			Navicat
		--使用命令创建数据表
			例：create table t1(r1 int not null,r2 varchar(5));
	7.修改数据
		--修改全部数据
			update 表名 set 列名=表达式（多个表达式逗号分隔）
			例：update stu_info set password=123
		--修改特定数据
			update 表名 set 
	8.删除表中数据（不删表）
		--按条件删除数据delete（如果没有条件，那么删除所有数据）
			delete 表名 where 条件
				例如：delete from stu_info where sex='女';
		--删除所有数据truncate
			truncate table 表名（注：不可添加where）
				例如：truncate stu_info
	9.条件查询(非数值用单引号，数字不用)
		--普通条件查询（查询符合条件的数据）
			select 列名 from 表名 where 条件
				例如：select * from users  where password=123456
			运算符：等于=;不等于<>;大于>;小于等于<=;多个运算条件用and连接，或者or
		--模糊查询（范围内between and;范围外not between and;像like;不像not like;空值 is null;非空值is not null）
			普通查询中：select * from scores where score>2500 and score<=3000查询一段数据比较繁琐，所以用模糊查询其中某一段
				select * from scores where score between 2500 and 3000（当我们用这句查询时，2500和3000是可以被查询出来的，而且前面的数一定是大于后面的数）
			通配符：【'_'】name like '张_'一个字符【%】name like '张%'任意长度【[]】指定范围内【[^]】不在括号中
		--查询空值运算符
	10.汇总和分组数据
		--聚合函数
			常用聚合函数：数字非空求和sum() 数字非空求均值avg() 数字datetime字符返回最小min()【时间2015大于2014字符串按照字典规则排列】 
						max() 任意数据类型的统计行数count()【记录的行数】
			统计行数count()	例：select count(列名) from 表名	统计所有的行	select count(*) from 表名
			求和函数sun() 例：select sun(列名) as '别名' from 表名 where 列名=值
			求平均值avg() 例：select avg(列名) as '别名' from 表名 where 列名=值
			求最大值max() 例：select max(列名) as '别名' from 表名 where 列名=值
			多重聚合查询例：select sum(SCORE) as '总分',avg(SCORE) as '平均分',max(SCORE) as '最高分' from SCORES where USER_QQ='6354'
		--在结果集内分组group by（具有相同属性的同个列的值可以归为一组）
			上面这条语句，去掉where是查询所有人的总和平均，我们想查询细分到每个人的总和平均，所以where要修改成group by USER_QQ，即按照用户分组
			select sum(SCORE) as '总分',avg(SCORE) as '平均分',max(SCORE) as '最高分' from SCORES group by USER_QQ
		--筛选分组结果(分组查询的结果再次进行的筛选having)
			引用上面的语句，进行筛选having avg(SCORE)>4000即平均分数大于4000进行筛选
			select sum(SCORE) as '总分',avg(SCORE) as '平均分',max(SCORE) as '最高分' from SCORES group by USER_QQ having avg(SCORE)>4000
			查询所有用户的平均分和分数，并按照平均分数倒序排列(order by排序，默认升序)
			select USER_QQ, avg(SCORE) as '平均分', sum(SCORE) as '总分' from SCORES group by USER_QQ order by avg(SCORE) desc
		--select语句的执行顺序
			from子句指定数据源
			where子句基于指定的条件对记录进行筛选（过滤掉不需要的数据）
			group by对子句进行分组多个数据
			使用聚合函数进行计算》使用having继续进行筛选
			order by对结果集进行排序（最后的一个步骤）
	11.字符串查询
		--字符串函数
			计算字符长度CHAR_LENGTH(s)计算字符串中有几个字符、LENGTH(s)内存当中占用的字节数
				select char_length('abc')	--返回值是3，即使是汉字仍然是3
				select LENGTH('abc')	--返回值3，汉字3个就是9位，因为在utf8编码下，每个汉字占用3个字节（但是我实验的是占用两个字节）
			合并字符串函数CONCAT(s1,s2)把参数所指的字符串全部合并为一组字符串，可添无数个参数（其中有一个参数为空，那么全部为空）、concat_ws(x,s1,s2)指定连接符
				select concat('你好吗','我很好','是吗')	--你好吗我很好是吗
				select concat_ws('#','你好吗','我很好','是吗')	--你好吗#我很好#是吗
			替换字符串的函数insert(s1,x,len,s2)	--('源字符串',从第几位开始节选,节选的长度位数,'替换成字符串')replace(s,s1,s2)('源字符串','源字符串段落','替换成')
				insert('abcedf',2,3,'##')	--a##ef
				select replace('abcdefab','ab','%%')	--%%cdef%%
			截取字符串函数left(s,n)、right(s,n)('被截取的字符串',截取长度)
				select left/right('abcde',3)	--abc/cde
			重复生成字符串函数repeat(s,n)('源字符串',重复显示次数)
				select repeat('abc',3)	--abcabcabc
			大小写转换函数lower(x)/lcase(x)转小写，upper(x),ucase(x)转大写
				select lcase('ABC')	--abc
			填充字符串的函数lpad(s1,len,s2)左填充rpad(s1,len,s2)右填充('源字符串',填充长度,'填充字符串')
				select lpad('abcd',10,'#')	--######abcd
			删除空格的函数ltrim(s)/rtrim(s)/trim(s)删除左/右/全部的空格（只能去除两边的空格）
			删除指定字符串trim(s1 from s)(删除靠着边的字符串，要是输入b，就没有效果，因为b没靠着边)
				select trim('a' from 'abcabc')	--bcabc
			获取子字符串substring(s,n,len)/mid(s,n,len)('原始字符串',开始截取的位置,截取的长度)
				select substring('abcde',3,2)	--cd
			返回指定位置字符串函数elt(n,s1,s2,s3)(返回哪个字符串,'字符串1','字符串2','字符串3')
				select elt(2,'abc','def','ghi')	--def
			返回指定字符串位置field(s,s1,s2)('查找这个字符串所在后面的位置','字符串1','字符串2','字符串3')
				select field('abc','def','hij','abc')	--3
	12.关系型数据库的常用概念
		--数据库和数据库管理系统
			
		--关系型数据库常用概念
			数据冗余：两个表数据存在相交
			数据完整性：表中信息是否存在错误
			实体完整性：主键莫名为空（理论上主键唯一且不为空）
			外键：来源于其他表的主键列部分（从属于那个表的部分）那么可以说这个表（主表）的外键是（副表）的主键列
			引用完整性：一个表外键缺失（继承于这个表的主键的副表的主键列相对于主表的主键列缺失信息）
			域完整性（域就是字段）：没达到表中字段（就是列）的要求的信息【非空它空了，长度超的等】（就是信息中的‘另类’）就是域完整性缺失
		--结构化查询语言SQL简介
			SQL（structured Query Language）结构化查询语言。就是国际上为了规范数据库的增删改查所规范的一种语言
			数据定义语言（DDL）create、alter、drop
			数据操纵语言（DML）insert、delete、update、select、trmate（不检查全删）
			数据控制语言（DCL）grant【分配】、revoke【回收】、deny【拒绝】
			
	13.数据库管理
		--创建数据库
			create database 数据库名
		--删除数据库
			drop database 数据库名
	14.日期与时间函数
		--函数：按格式输入参数，返回正确结果的运算单元
			返回当前日期函数（数据库服务器的系统日期）：select curdate();select current_date();select curdate()+0;(后边+0运算结果整合成一个int值)
			返回当前时间：select curtime();select current_time();select curtime()+0;(后边+0还是转换成数值型)
			日期时间统一：current__timestamp();localtime();now();sysdate();
			获取月份：month('日期');返回月份，monthname('时间');返回月份名字（英文）
			获取星期：dayname('时间');(英文)dayofweek('时间')（数字，以周日为1轮7个数）;weekday('时间')（数字，周一到周天，0到6循环）
				一年当中第几个星期week('时间')(以0起始)weekofyear('时间')（以1起始）
			获取天数：dayofyear('时间')（所在年当中第几天）dayofmonth('时间')（所在月当中第几天）
			年份，季度，小时，分钟，秒：year('时间')quarter('时间')hour('time')minute('time')second('time')
	15.为列添加约束（检查数据是否符合要求）
		--主键约束（保证实体完整性：不能重复和非空）
			primary key
		--外键约束（保证引用完整性）
			userQQ varvhar(20) not null references user(userQQ)	--references 外表名(被引用的列)
		--检查约束（保证域完整性）
			GNO int not null check(GNO>0)	--	check(列名>值)
		--默认约束（预设一个默认值作为空的填充）
			userSEX char(2) not null default '男'	//default '值'
		--自动增长（保证实体完整性，自动增加不重复）
			GNO int not null auto_increment	--auto_increment代表自增列数值
	16.修改数据表（数据表创建之后怎样去进行一些修改）
		--修改表名
			alter table 表名 rename to 新表名
		--修改字段名
			alter table 表名 change 旧字段名称 新字段名称 数据类型
		--修改字段的数据类型
			alter table 表名 modify 要修改那个字段的名 新的数据类型
		--添加和删除字段
			alter table 表名 add 新的字段名 新字段类型
			alter table 表名 drop 字段名
		--在指定字段后面添加字段
			alter table 表名 add 列名 数据类型 after 在哪个字段后面添加
		--增补约束（约束命名规范：约束类型_表_列    PK_USER_PASSWORD）
			添加主键PK约束：alter table 表名 add constraint 约束名称 primary key(被约束主键字段名)
			添加外键FK约束：alter table 表名 add constraint 约束名称 foreign key(被约束外键字段名) references 外表名(外表主键字段名) 
			添加检查CK约束：alter table 表名 add constraint 约束名称 check(表达式)
			添加默认值：	alter table 表名 alter 添加默认值的字段名 set default '默认值'
			添加自增列：	alter table 表名 modify column 字段名 类型 是否允许为空 auto_increment (后面可以添加主键，类型一般为int非空)
	17.插入数据（在数据库中增加记录）
		--所有列插入数值（列值同数，列值同序）
			insert into 表名 values(v1,v2)		into可以省略，多少个列就多少个v值，列的数量与值的数量一致，括号中书写的值要对应字段名称可以用default默认
		--为特定列插入值
			insert into 表名(列1,列2,列3) values(v1,v2,v3)			指定顺序，列值对应
		--一次性插入多条记录
			insert into 表名(列1,列2,列3) values(v1,v2,v3),(v4,v5,v6)		可以省略字段名
	18.查询基础
		--查询和提取数据的过程
			客户端与服务器交互
			select 列1,列2,列3 from 表1,表2,表3 where 条件 group by 分组名 having 再筛选名 order by 字段名 升/降序
		--select语句简介
	19.对查询结果进行排序
		--对指定列进行排序（排序依据，排序方式）
			select 字段 from 表 order by 被排序字段 asc/desc
		--多列排序（排序依据，排序方式，优先级）
			列：查询所有信息，游戏编号升序分数降序排列
			select * from scores order by GNO asc,SCORE desc		先出现的列优先级更高
	20.连接查询
		（单纯使用select * from 表1,表2就会列出笛卡尔乘积，就是所有列的排列组合）
		--from子句进行多表查询
			多表连接（不同的表中抽取不同的列进行连接查询显示）
			select 列1,列2,列3 from 表1,表2,表3 where 表1.列=表2.列 and 表2.列=表3.列	注意：连接所用的两个表中都有该列，这个列最可能是主键
		--内连接特点
			相连接的两张表地位相等
			如果一张表在另一张表中不存在对应的数据，则不做连接
			显式内连接：
		--外连接特点
			做连接的两个表地位不平等，其中有一张是基础表
			基础表中的数据必须出现，即使另一张表中没有数据与之匹配，也要用null补齐
			左外连接时左表是基础表，右外连接时右表是基础表
			如何区分左右表？语句中先出现的表是左表，后出现的表是右表
				例子：select 列名 from table1 (left/right/outer) join table2 on table1.列=table.列 and table1.列=值	后面是连接条件，最好主键
	21.数据管理技术的产生和发展
		--使用数据库的必要性
		--数据管理技术的发展阶段
			A.人工管理阶段特点：
				容易丢失数据
				数据重复、冗余
				难以查阅和使用
				维护成本高
			B.文件系统阶段的特点：
				易于存储
				处理速度加快
				数据形式丰富
			C.数据库系统阶段特点：
				易于维护海量数据
				更快的运算和处理
				保证数据的安全性
				使用编程语言管理数据
	22.MySQL简介
		--MySQL简介
			1985年由瑞典MySQLAB公司开发，目前属于oracle公司
			开源性，占用资源少，适用于多种编程语言，支持客户端访问
		--常用版本
			MySQL Community Server 社区版本，开源免费，但不提供官方技术
			MySQL Enterprise Edition企业版，需要付费，可免费试用30天
			MySQL Cluster 集群版，开源免费，可以将MySQL Server封装成一个Server
			MySQL Cluster CGE 高级集群版，付费试用
	23.MySQL的下载和安装
		--下载
			登录官网www.mysql.com
			进入下载模块download
			选择社区版Community
			选择MySQL Community Server下的download链接
			找到官网推荐的最高版本
			选择图形化安装包MySQL installer msi	下载（ZIP文件用命令行进行安装，MSI用图形化进行安装）
				选择那个200M的安装包
		--安装
			已经安装了MySQL就先卸载
			点击安装文件进行安装，选择接受许可安装开始
			选择全部Fall安装模式（如果custom自定义安装选择，展开MySQL Server后选择X64，点击绿色箭头移到安装区域）
				（之后选择application的工作空间Workbench再次选择X64，点击绿色箭头移动到安装区域）下一步
			正式进入安装进程，完成安装后进入配置向导
		--配置
			config Type配置类型模式（development开发者模式【初学选用】，Server服务器模式，dedicate专用服务器模式）
			配置端口号，默认3306，一般不修改》设置root管理员密码，底下是设置用户》下一步
			配置Windows服务（Windows server name服务名称）底下的默认》下一步》执行
	24.删除数据表
		--删除无关联的数据表
			drop table【if exists选填，如果存在就删除，不存在这个表就不进行任何操作】 表名1,表名2;
			例：drop table scores
		--删除有关联的数据表
			1.如果两张表存在引用关系（解除关系后），那么删除表应该先删除从表，后删除主表（先删除外键所存在的那个表）
			2.先解除外键关系，就是清除约束：alert table 从表名 drop foreign Key（要删除的约束类型） con_name（约束名称）
			3.也可以用图形化操作工具进行清除约束
	25.简单查询
		--查询表的全部行和列
			1.select * from 表名
		--查询表的部分列
			1.select 列名1,列名2 from 表名
		--别名的使用（让结果集的列名以另外的形式反映出来，列名本身没有发生改变）
			select 列名1 as 别名1，列名2 as 别名2 from 表名
			也可以：select 列名1 '别名1', 列名2 '别名2' from 表名
		--distinct关键字的使用（从查询结果中消除重复行，重复的数据只显示一次）
			select distinct 列名 from 表名
		--limit关键字的使用（指定查询结果集中数据显示的范围，截取一部分进行显示，起始位置，返回条数）
			select * from 表名 limit 2,3(起始位置，这里的2是指第三条数据，因为下标从0开始,返回的结果条数)
	26.子查询
		--使用in关键字进行子查询（连接查询的一种代替方法,指在某个范围之内【后面括号是范围，前面是结果集，两个表存在关系】）
				注：一般子查询中的列与外围结果集（where后面的列）相对应，能减少出错的可能
			例：select * from scores where gno in (select gno from games where gtype='棋牌')
				找打棋牌类游戏的编号，然后把这个编号作为条件进行比较，在范围之内的结果集显示
			例2：select user_qq from users where user_qq not in (select user_qq from scores where gno=5)
				查询没玩游戏的玩家
		--使用exists关键字进行子查询（如果存在即查询并显示，子查询【小括号里的】无结果，外围则不执行）
				注：子查询在有结果的情况下进行外部父查询
			例：select * from scores where exists (select * from users where user_name='孙悟空')
				如果有孙悟空的话就查询
	27.联合查询
		--使用联合查询（多个select语句之间用union【all可选】进行连接）
				特点：可以把多条查询语句纵向连接在一起，列的数量和类型也要兼容，就是说两个表要查的列数一致，数据类型一样
			例：select user_name from users union select gname from games(这个是纵向连接在一起，使用的名称是第一个列的名称，重复数据显示一次)
				注：有all关键字可以显示全部数据（重复的也显示），
			例2：select * from users where user_sex='女' union select * from users where user_birthday is null
				要是没有对应，可以用空字符串,' '的方法来填充使之正常运行
get技能：
	1.在执行语句后面加上空格 \G可以对查询结果进行格式化显示（此处省略句尾分号）
	
	
注意：
	1.命名规范：表名长度不能超过30个字符，单词全部采用单数形式，首字母大写单词间不用连接符号
				数据库名：全部小写，多个单词用_隔开，例如：information_db
				字段名：大写可带下划线
	2.查询语句执行顺序从后向前（where条件》select）
	3.常用sql语句
	1：删除列

ALTER TABLE 【表名字】 DROP 【列名称】

2：增加列

ALTER TABLE 【表名字】 ADD 【列名称】 INT NOT NULL  COMMENT '注释说明'

3：修改列的类型信息

ALTER TABLE 【表名字】 CHANGE 【列名称】【新列名称（这里可以用和原来列同名即可）】 BIGINT NOT NULL  COMMENT '注释说明'

4：重命名列（可以更改数据类型）

ALTER TABLE 【表名字】 CHANGE 【列名称】【新列名称】 BIGINT NOT NULL  COMMENT '注释说明'

5：重命名表

ALTER TABLE 【表名字】 RENAME 【表新名字】

6：删除表中主键

Alter TABLE 【表名字】 drop primary key

7：添加主键

ALTER TABLE sj_resource_charges ADD CONSTRAINT PK_SJ_RESOURCE_CHARGES PRIMARY KEY (resid,resfromid)

8：添加索引

ALTER TABLE sj_resource_charges add index INDEX_NAME (name);

9: 添加唯一限制条件索引

ALTER TABLE sj_resource_charges add unique emp_name2(cardnumber);

10: 删除索引

alter table tablename drop index emp_name;

1.查询指定时间三年级三班语数外平均成绩
select avg(score),subname from score left join student on student.stid=score.stid left join subject on score.sub_no=subject.sub_no where grade='三' and class='三' and date='2017/7/7' group by(subname);

2.三年级三班平均年龄
select avg(age) as '平均年龄' from student;

3.